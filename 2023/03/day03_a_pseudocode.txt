DECLARE Dictionary<[row,column]:Integer> partNumbers

OPEN "input.txt" as inputFile
    PARSE inputFile AS a 2-D Character Array
    FOR EACH row IN inputFileArray:
        FOR EACH column IN row:
            IF column.value IS A SYMBOL:
                CALL CheckAdjacentCells(row, column)
            END-IF
        END-FOR
    END-FOR
CLOSE inputFile

// Calculate total calibration value
INITIALIZE totalCalibrationValue = 0
FOR EACH location IN partNumbers:
    ADD partNumbers[location] TO totalCalibrationValue
END-FOR


FUNCTION CheckAdjacentCells(current row, current column):
    INITIALIZE prevRow = current row - 1
    INITIALIZE nextRow = current row + 1
    INITIALIZE prevColumn = current column - 1
    INITIALIZE nextColumn = current column + 1
    // Iterate through rows
    FOR row = prevRow TO nextRow:
        // Iterate through columns
        FOR column = prevColumn TO nextColumn
            // No need to check center cell
            IF row IS NOT current row OR column IS NOT current column:
                IF partNumbers[row, column] DOES NOT EXIST:
                    SET adjacentCell = inputFileArray[row, column]
                    IF adjacentCell IS A DIGIT:
                        SET extractedNumber = ExtractRemainingNumberString(inputFileArray[row], column]
                        SET numberString = extractedNumber[0]
                        SET startColumn = extractedNumber[1]
                        MAP numberString TO partNumbers[row, startColumn]
                        IF numberString.length > 1:
                            INITIALIZE nextIndex = startColumn + 1
                            INITIALIZE endIndex = startColumn + numberString.length - 1
                            FOR index = nextIndex TO endIndex:
                                MAP null TO partsMapping[row, index]
                            END-FOR
                        END-IF
                    END-IF
                END-IF
            END-IF
        END-FOR
    END-FOR
END-FUNCTION


FUNCTION ExtractRemainingNumberString(lineString, currentIndex):
    INITIALIZE numberString = lineString[currentIndex]
    INITIALIZE leftIndex = currentIndex - 1
    INITIALIZE rightIndex = currentIndex + 1
    INITIALIZE leftChar = lineString[leftIndex]
    INITIALIZE rightChar = lineString[rightIndex]
    INITIALIZE startIndex = currentIndex
    // Search to the left
    WHILE leftChar IS A DIGIT:
        DECREMENT startIndex
        UPDATE numberString = leftChar + numberString
        DECREMENT leftIndex
        UPDATE leftChar = lineString[leftIndex]
    END-WHILE
    // Search to the right
    WHILE rightChar IS A DIGIT:
        UPDATE numberString = numberString + rightChar
        INCREMENT rightIndex
        UPDATE rightChar = lineString[rightIndex]
    END-WHILE
    RETURN [numberString, startIndex]
END-FUNCTION